#!/usr/bin/python

import json
import os
import re
import sys

from subprocess import check_output

binarypath = "/usr/sbin/tw-cli"
normalmode = False
nagiosmode = False
zabbixmode = False
argv = list()

if len(sys.argv) > 1 and sys.argv[1][:2] == '--':
    if len(sys.argv) == 2 and sys.argv[1] == '--nagios':
        nagiosmode = True
    elif len(sys.argv) > 2 and sys.argv[1] == '--zabbix':
        zabbixmode = True
        argv = sys.argv[2:]
    else:
        print 'Usage: 3ware-status [--nagios|[[--zabbix] <prop> [<key>]]]'
        sys.exit(1)
else:
    normalmode = True
    argv = sys.argv[1:]

# Check binary exists (and +x), if not print an error message
if not (os.path.exists(binarypath) and os.access(binarypath, os.X_OK)):
    if nagiosmode:
        print 'UNKNOWN - Cannot find %s' % binarypath
    else:
        print 'Cannot find %s. Please install it.' % binarypath
    sys.exit(3)

# Get command output
def getOutput(args = ''):
    output = check_output([binarypath] + args.split())
    return [line for line in output.splitlines() if not re.match(r'^$', line.strip())]

def getProperty(args):
    try:
        return getOutput('info %s' % args)[0].split(' = ')[1].strip()
    except IndexError:
        return 'N/A'
 
def parseControllers():
    controllers = dict()
    for line in getOutput('info'):
        if re.match(r'^c[0-9]+\s.*$', line.strip()):
            parts = line.split()

            id = parts[0]
            model = getProperty('%s model' % id)

            controllers[id] = { 'model': model }
    return controllers

def parseInfo(controller):
    arrays = dict()
    disks = dict()
    for line in getOutput('info %s' % controller):
        if re.match(r'^u[0-9]+\s.*$', line.strip()):
            parts = line.split()

            id = controller + parts[0]
            type = parts[1].replace('-', '')
            status = parts[2]
            size = '%sG' % parts[6].split('.')[0]

            arrays[id] = { 'type': type, 'status': status, 'size': size }

        if re.match(r'^p[0-9]+\s.*$', line.strip()):
            parts = line.split()

            if not parts[2].strip() == '-' and not parts[1].strip() == 'NOT-PRESENT':
                array = controller + parts[2]
                id = array + parts[0]
                model = getProperty('%s %s model' % (controller, parts[0]))
                status = getProperty('%s %s status' % (controller, parts[0]))

                disks[id] = { 'model': model, 'status': status }

    return (arrays, disks)


controllers = dict()
arrays = dict()
disks = dict()

def init():
    controllers.update(parseControllers())
    for controller in controllers.keys():
        a, d = parseInfo(controller)
        arrays.update(a)
        disks.update(d)

def info(args):
    str  = '-- Controller informations --\n'
    str += '-- ID | Model\n'
    for c, v in controllers.items():
        str += '%s | %s\n' % (c, v['model'])
    str += '\n'

    str += '-- Arrays informations --\n'
    str += '-- ID\tType\tSize\tStatus\n'
    for a, v in arrays.items():
        str += '%s\t%s\t%s\t%s\n' % (a, v['type'], v['size'], v['status'])
    str += '\n'

    str += '-- Disks informations\n'
    str += '-- ID\tModel\t\t\tStatus\n'
    for d, v in disks.items():
        str += '%s\t%s\t%s\n' % (d, v['model'], v['status'])
    return str[:-1]

def discover(objs, label):
    return lambda args: json.dumps({ 'data': [{label: o} for o in objs.keys()] })

def property(objs, prop):
    return lambda args: objs[args[0]][prop]

def execute(command, args = []):
    try:
        init()
        print commands[command](args)
    except (KeyError, IndexError):
        print 'Usage: 3ware-status [--zabbix][<prop> [<key>]]'
        print ''
        print 'Where prop is one of:'
        print '\n'.join(['  %s' % command for command in commands])
        print ''
        print 'And key is one of the items output by <prop.discover>'

if normalmode or zabbixmode:
    commands = dict()
    if normalmode:
        commands['default'] = info
    commands['controller.discover'] = discover(controllers, '{#3WCONT}')
    commands['controller.model'] = property(controllers, 'model')
    commands['array.discover'] = discover(arrays, '{#3WARRAY}')
    commands['array.size'] = property(arrays, 'size')
    commands['array.status'] = property(arrays, 'status')
    commands['array.type'] = property(arrays, 'type')
    commands['disk.discover'] = discover(disks, '{#3WDISK}')
    commands['disk.model'] = property(disks, 'model')
    commands['disk.status'] = property(disks, 'status')

    if len(argv) > 0:
        command = argv[0]
        args = argv[1:]
        execute(command, args)
    else:
        execute('default')
elif nagiosmode:
    init()
    badarray  = len([a for a, v in arrays.items() if v['status'] not in ['OK', 'VERIFYING']])
    goodarray = len([a for a, v in arrays.items() if v['status'] in ['OK', 'VERIFYING']])
    baddisk   = len([d for d, v in disks.items() if v['status'] not in ['OK', 'VERIFYING']])
    gooddisk  = len([d for d, v in disks.items() if v['status'] in ['OK', 'VERIFYING']])
    bad = badarray or baddisk

    print 'RAID %s - Arrays: OK:%s Bad:%s - Disks: OK:%s Bad:%s' % ('ERROR' if bad else 'OK', goodarray, badarray, gooddisk, baddisk)
    sys.exit(bad)
